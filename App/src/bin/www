#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
const app = require('../app');
const debug = require('debug')('src:server');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP or HTTPS server.
 */
const server = (() => {
  if (process.env.USE_HTTPS == 'yes') {
    const https = require('https');
    const fs = require('fs');
    const options = {
      key: fs.readFileSync(process.env.HTTPS_SERVER_KEY),
      cert: fs.readFileSync(process.env.HTTPS_SERVER_CERT)
    };
    return https.createServer(options, app);
  } else {
    const http = require('http');
    return http.createServer(app);
  }
})();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log('### Server started on port', port));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 * @param {Int} val Port number to use
 * @return {Int | Boolean} Port number of False
 */
function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {Object<Error>} error Error object
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
